pipeline {
    agent any

    environment {
        // Optional: Use Node Version Manager (nvm) to enforce specific version
        // NODE_VERSION = '14.x'  // Adapt according to your needs

        // SonarQube configuration
        SONARQUBE_URL = 'http://192.168.230.128:9000/'  // URL of your SonarQube instance
        SONAR_TOKEN = credentials('sonarqube') // Credentials ID for SonarQube token
    }

    stages {
        stage('Checkout Code') {
            steps {
                // Clone the Git repository
                git url: 'https://github.com/khadythiara/ganeyi_frontend-dev.git', branch: 'main'
            }
        }
        
        stage('Install Dependencies') {
            steps {
                // Install Angular dependencies
                sh 'npm install'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                // Analyze the project with SonarQube
                withSonarQubeEnv('sonarqube') {
                    sh """
                     sonar-scanner \
                    -Dsonar.projectKey=ganeyi_frontend-dev \
                    -Dsonar.sources=src \
                    -Dsonar.host.url=$env.SONARQUBE_URL \
                    -Dsonar.login=$env.SONAR_TOKEN
                    """
                }
            }
        }

        stage('Build Angular Project') {
            steps {
                // Optional: Use a separate script in package.json for production build
                // sh 'npm run build:prod'  // Example using a separate script
                sh 'npm run build -- --prod'  // Current approach
            }
        }

        stage('Quality Gate') {
            steps {
                // Wait for SonarQube to finish analysis and Quality Gate results
                timeout(time: 1, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
