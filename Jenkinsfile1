pipeline {
    agent any

    environment {
        imagename = "khadydiagne/ganeyi_frontend-dev"
        registryCredential = 'simple-java-project'
        dockerImage = ''
        WEBHOOK_URL = 'https://chat.googleapis.com/v1/spaces/AAAAF-fYuRc/messages?key=AIzaSyDdI0hCZtE6vySjMm-WEfRq3CPzqKqqsHI&token=YquNatic_vtgLs662cM1OUCjqcwb_gZ7EIxBcWLRbB0' // URL du webhook
        SONAR_TOKEN = credentials('sonarqube') // Remplacez par l'ID de vos credentials SonarQube dans Jenkins
    }

    stages {
        stage('Checkout Code') {
            steps {
                // Cloner le dépôt Git
                git url: 'https://github.com/khadythiara/ganeyi_frontend-dev.git', branch: 'main'
            }
        }
        
        stage('Install Dependencies') {
            steps {
                // Installer les dépendances du projet Angular
                sh 'npm install'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    withSonarQubeEnv('sonarqube') {  // Remplacez 'SonarQubeServer' par le nom de votre serveur SonarQube dans Jenkins
                        sh """
                            /opt/sonar-scanner/bin/sonar-scanner \
                            -Dsonar.projectKey=ganeyi_frontend-dev \
                            -Dsonar.sources=src \
                            -Dsonar.host.url=http://192.168.230.128:9000/ \
                            -Dsonar.login=${SONAR_TOKEN}
                        """
                    }
                }
            }
        }

        stage('Build Angular Project') {
            steps {
                script {
                    sh 'npm run build -- --configuration production'
                    dockerImage = docker.build(imagename, ".")
                }
            }
        }

        stage('Push Image') {
            steps {
                script {
                    docker.withRegistry('', registryCredential) {
                        dockerImage.push("$BUILD_NUMBER")
                        dockerImage.push('latest')
                    }
                }
            }
        }
 stage('Remove Unused docker image') {
      steps{
        sh "docker rmi -f $imagename:$BUILD_NUMBER"
         sh "docker rmi -f $imagename:latest"

      }
    }
 }
    post {
        success {
            script {
                def response = httpRequest(
                    httpMode: 'POST',
                    url: WEBHOOK_URL,
                    contentType: 'APPLICATION_JSON',
                    requestBody: '{"text":"✅ Build ganeyi_frontend-dev: terminé avec succes!"}',
                    validResponseCodes: '100:499'
                )
                echo "Response for success notification: ${response}"
            }
            echo 'Pipeline completed successfully!'
        }

        failure {
            script {
                def response = httpRequest(
                    httpMode: 'POST',
                    url: WEBHOOK_URL,
                    contentType: 'APPLICATION_JSON',
                    requestBody: '{"text":"❌ Build ganeyi_frontend-dev: build échoué."}',
                    validResponseCodes: '100:499'
                )
                echo "Response for failure notification: ${response}"
            }
            echo 'Pipeline failed!'
        }
    }
}

