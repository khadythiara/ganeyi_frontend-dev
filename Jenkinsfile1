pipeline {
    agent any

    environment {
        imagename = "khadydiagne/ganeyi_frontend-dev"
        registryCredential = 'simple-java-project'
        dockerImage = ''
        WEBHOOK_URL = 'https://chat.googleapis.com/v1/spaces/AAAAF-fYuRc/messages?key=...'
        SONARTOKEN = credentials('sonarqube') // Remplacez par l'ID de vos credentials SonarQube dans Jenkins
    }

    stages {
        stage('Send Webhook Notification - Build Started') {
            steps {
                script {
                    def response = httpRequest(
                        httpMode: 'POST',
                        url: WEBHOOK_URL,
                        contentType: 'APPLICATION_JSON',
                        requestBody: '{"text": " üöÄ Build jenkins_sonarqube ganeyi_frontend-dev: d√©marr√© par khady diagne!"}',
                        validResponseCodes: '100:499'
                    )
                    echo "Response for start notification: ${response}"
                }
            }
        }

        stage('Checkout Code') {
            steps {
                git url: 'https://github.com/khadythiara/ganeyi_frontend-dev.git', branch: 'main'
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'npm install'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    withSonarQubeEnv('sonarqube') {
                        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONARTOKEN')]) {
                            sh """
                            /opt/sonar-scanner/bin/sonar-scanner \
                            -Dsonar.projectKey=ganeyi_frontend-dev \
                            -Dsonar.sources=src \
                            -Dsonar.host.url=http://192.168.230.128:9000/ \
                            -Dsonar.token=${SONARTOKEN}
                            """
                        }

                    }
                }
            }
        }

        stage('Quality Gate Check') {
            steps {
                timeout(time: 5, unit: 'MINUTES') {  // Augmenter le timeout √† 10 minutes
                    script {
                        def qualityGate = waitForQualityGate()
                        if (qualityGate.status != 'OK') {
                            error "Quality Gate failed: ${qualityGate.status}"
                        }
                    }
                }
            }
        }

        stage('Build Angular Project') {
            steps {
                script {
                    sh 'npm run build -- --configuration production'
                    dockerImage = docker.build(imagename, ".")  // Le bloc docker.build doit √™tre dans un script block
                }
            }
        }

        stage('Push Image') {
            steps {
                script {
                    docker.withRegistry('', registryCredential) {
                        dockerImage.push("$BUILD_NUMBER")
                        dockerImage.push('latest')
                    }
                }
            }
        }
    }

    post {
        success {
            script {
                def qualityGate = waitForQualityGate()  // R√©cup√©rer le r√©sultat de SonarQube
                def sonarReport = "‚úÖ Quality Gate Status: ${qualityGate.status}\n" +
                                  "Bugs: ${qualityGate.bugs}\n" +
                                  "Vulnerabilities: ${qualityGate.vulnerabilities}\n" +
                                  "Code Smells: ${qualityGate.codeSmells}\n"

                def response = httpRequest(
                    httpMode: 'POST',
                    url: WEBHOOK_URL,
                    contentType: 'APPLICATION_JSON',
                    requestBody: """{
                        "text": "‚úÖ Build jenkins_sonarqube termin√© avec succ√®s!\\n${sonarReport}"
                    }""",
                    validResponseCodes: '100:499'
                )
                echo "Response for success notification: ${response}"
            }
            echo 'Pipeline completed successfully!'
        }

        failure {
            script {
                def response = httpRequest(
                    httpMode: 'POST',
                    url: WEBHOOK_URL,
                    contentType: 'APPLICATION_JSON',
                    requestBody: '{"text":"‚ùå Build jenkins_sonarqube √©chou√©."}',
                    validResponseCodes: '100:499'
                )
                echo "Response for failure notification: ${response}"
            }
            echo 'Pipeline failed!'
        }
    }
}
