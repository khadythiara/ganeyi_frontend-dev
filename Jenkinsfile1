pipeline {
    agent any

    environment {

       imagename = "khadydiagne/ganeyi_frontend-dev"
        registryCredential = 'simple-java-project'
        dockerImage = ''
        SONAR_TOKEN = credentials('sonarqube') // Remplacez par l'ID de vos credentials SonarQube dans Jenkins
    }

    stages {
            stage('Send Webhook Notification - Build Started') {
            steps {
                script {
                    def response = httpRequest(
                        httpMode: 'POST',
                        url: WEBHOOK_URL,
                        contentType: 'APPLICATION_JSON',
                        requestBody: '{"text": " üöÄBuild jenkins_sonarqube ganeyi_frontend-dev: demarrer par khady diagne!"}',
                        validResponseCodes: '100:499'
                    )
                    echo "Response for start notification: ${response}"
                }
            }
        }
        stage('Checkout Code') {
            steps {
                // Cloner le d√©p√¥t Git
                git url: 'https://github.com/khadythiara/ganeyi_frontend-dev.git', branch: 'main'
            }
        }
        
        stage('Install Dependencies') {
            steps {
                // Installer les d√©pendances du projet Angular
                sh 'npm install'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    withSonarQubeEnv('sonarqube') {  // Remplacez 'SonarQubeServer' par le nom de votre serveur SonarQube dans Jenkins
                        sh """
                            /opt/sonar-scanner/bin/sonar-scanner \
                            -Dsonar.projectKey=ganeyi_frontend-dev \
                            -Dsonar.sources=src \
                            -Dsonar.host.url=http://192.168.230.128:9000/ \
                            -Dsonar.login=${SONAR_TOKEN}
                        """
                    }
                }
            }
        }
        
        stage('Quality Gate Check') {
            steps {
                timeout(time: 1, unit: 'MINUTES') {
                    script {
                        def qualityGate = waitForQualityGate()
                        if (qualityGate.status != 'OK') {
                            error "Quality Gate failed: ${qualityGate.status}"
                        }
                    }
                }
            }
        }

        stage('Build Angular Project') {
            steps {
                sh 'npm run build -- --configuration production'
                dockerImage = docker.build(imagename, ".")
            }
        }
    }

        stage('Push Image') {
            steps {
                script {
                    docker.withRegistry('', registryCredential) {
                        dockerImage.push("$BUILD_NUMBER")
                        dockerImage.push('latest')
                    }
                }
            }
        }

    post {
        success {
             script {
                def response = httpRequest(
                    httpMode: 'POST',
                    url: WEBHOOK_URL,
                    contentType: 'APPLICATION_JSON',
                    requestBody: '{"text":"‚úÖ Build jenkins_sonarqube status: termine avec succes!"}',
                    validResponseCodes: '100:499'
                )
                echo "Response for success notification: ${response}"
            }
            echo 'Pipeline completed successfully!'
        }
  failure {
     script {
              def response = httpRequest(
                    httpMode: 'POST',
                    url: WEBHOOK_URL,
                    contentType: 'APPLICATION_JSON',
                    requestBody: '{"text":" ‚ùå Build jenkins_sonarqube status: build echoue."}',
                    validResponseCodes: '100:499'
                )
                echo "Response for failure notification: ${response}"
            }
            echo 'Pipeline failed!'
        }
    }
}
