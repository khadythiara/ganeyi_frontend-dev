pipeline {
    agent any

    environment {
        // Définir la version de Node.js à utiliser
        NODE_VERSION = '16.x'  // Adapter selon la version de Node.js souhaitée
        // Configuration de SonarQube
        SONAR_SCANNER_HOME ='sonarqube'  // Nom de l'outil SonarQube configuré dans Jenkins
        SONARQUBE_URL = 'http://192.168.230.128:9000/'  // URL de votre instance SonarQube
        SONAR_TOKEN = credentials('sonarqube') // Jeton SonarQube
    }

    stages {
        stage('Checkout Code') {
            steps {
                // Cloner le dépôt Git
                git url: 'https://github.com/khadythiara/ganeyi_frontend-dev.git', branch: 'main'
            }
        }


        stage('Run Tests') {
            steps {
                // Lancer les tests unitaires Angular
                sh 'npm run test -- --watch=false --no-progress --browsers=ChromeHeadless'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                // Analyser le projet avec SonarQube
                withSonarQubeEnv('sonarqube') {
                    sh """
                    ${SONAR_SCANNER_HOME}/bin/sonar-scanner \
                    -Dsonar.projectKey=ganeyi_frontend-dev \
                    -Dsonar.sources=src \
                    -Dsonar.host.url=${SONARQUBE_URL} \
                    -Dsonar.login=${SONAR_TOKEN}
                    """
                }
            }
        }

        stage('Build Angular Project') {
            steps {
                // Compiler le projet Angular pour la production
                sh 'npm run build -- --prod'
            }
        }

        stage('Quality Gate') {
            steps {
                // Attendre que SonarQube termine l'analyse et renvoie le résultat du Quality Gate
                timeout(time: 1, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
